// This is a generated file, modify: generate/templates/class_header.h

#ifndef GITBRANCHITERATOR_H
#define GITBRANCHITERATOR_H
#include <nan.h>
#include <string>
#include <queue>
#include <utility>

#include "async_baton.h"
#include "promise_completion.h"

extern "C" {
#include <git2.h>
}

#include "../include/typedefs.h"

// Forward declaration.
struct git_branch_iterator {
};

using namespace node;
using namespace v8;

class GitBranchIterator : public Nan::ObjectWrap {
public:

  static Nan::Persistent<Function> constructor_template;
  static void InitializeComponent (Local<v8::Object> target);
  // diagnostic count of self-freeing object instances
  static int SelfFreeingInstanceCount;
  // diagnostic count of constructed non-self-freeing object instances
  static int NonSelfFreeingConstructedCount;

  git_branch_iterator *GetValue();
  void ClearValue();

  static Local<v8::Value> New(const git_branch_iterator *raw, bool selfFreeing, Local<v8::Object> owner = Local<v8::Object>());
  bool selfFreeing;



private:
  // owner of the object, in the memory management sense. only populated
  // when using ownedByThis, and the type doesn't have a dupFunction
  // CopyablePersistentTraits are used to get the reset-on-destruct behavior.
  Nan::Persistent<Object, Nan::CopyablePersistentTraits<Object> > owner;
  GitBranchIterator(git_branch_iterator *raw, bool selfFreeing, Local<v8::Object> owner = Local<v8::Object>());
  ~GitBranchIterator();

  static NAN_METHOD(JSNewFunction);
  static NAN_METHOD(GetSelfFreeingInstanceCount);
  static NAN_METHOD(GetNonSelfFreeingConstructedCount);

  git_branch_iterator *raw;
};

#endif
